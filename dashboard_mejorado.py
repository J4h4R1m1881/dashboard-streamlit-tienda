
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Configuraci√≥n general
sns.set_style("whitegrid")
st.set_page_config(page_title="Dashboard de Ventas", layout="wide")

# Cargar datos
df = pd.read_csv("data.csv")
df['Date'] = pd.to_datetime(df['Date'])

# T√≠tulo general
st.title("üìä Dashboard de Ventas - An√°lisis Exploratorio")

st.markdown("""
Este dashboard permite visualizar distintos an√°lisis del comportamiento de ventas y clientes de una tienda.
Utiliza el men√∫ lateral para seleccionar un an√°lisis espec√≠fico. Tambi√©n puedes filtrar por sucursal para ver resultados personalizados.
""")

# Filtro por sucursal
branches = df['Branch'].unique()
sucursal_seleccionada = st.sidebar.selectbox("Filtrar por sucursal", options=["Todas"] + list(branches))

if sucursal_seleccionada != "Todas":
    df = df[df['Branch'] == sucursal_seleccionada]

# Sidebar para seleccionar an√°lisis
analisis = st.sidebar.selectbox(
    "Selecciona un an√°lisis",
    [
        "Evoluci√≥n de Ventas Totales",
        "Ingresos por L√≠nea de Producto",
        "Distribuci√≥n del Rating",
        "Total por Tipo de Cliente",
        "M√©todo de Pago",
        "Costo vs Ganancia Bruta",
        "Correlaci√≥n Num√©rica",
        "Ingreso Bruto por Sucursal y L√≠nea"
    ]
)

# An√°lisis 1
if analisis == "Evoluci√≥n de Ventas Totales":
    st.subheader("üìà Evoluci√≥n de Ventas Totales")
    st.markdown("Este gr√°fico muestra c√≥mo evolucionaron las ventas totales a lo largo del tiempo.")
    datos = df.groupby('Date')['Total'].sum().reset_index()
    fig, ax = plt.subplots()
    sns.lineplot(data=datos, x='Date', y='Total', marker='o', ax=ax)
    ax.set_title("Evoluci√≥n de las Ventas Totales")
    st.pyplot(fig)

# An√°lisis 2
elif analisis == "Ingresos por L√≠nea de Producto":
    st.subheader("üì¶ Ingresos por L√≠nea de Producto")
    st.markdown("Compara las ventas totales generadas por cada l√≠nea de producto.")
    resumen = df.groupby('Product line')['Total'].sum().sort_values(ascending=False).reset_index()
    fig, ax = plt.subplots()
    sns.barplot(data=resumen, x='Total', y='Product line', palette='viridis', ax=ax)
    ax.set_title("Ingresos por L√≠nea de Producto")
    st.pyplot(fig)

# An√°lisis 3
elif analisis == "Distribuci√≥n del Rating":
    st.subheader("‚≠ê Distribuci√≥n del Rating")
    st.markdown("Observa la distribuci√≥n y tendencia general de las valoraciones entregadas por los clientes.")
    fig, axs = plt.subplots(1, 2, figsize=(12, 5))
    sns.histplot(df['Rating'], bins=10, kde=True, ax=axs[0])
    axs[0].set_title("Distribuci√≥n del Rating")
    sns.boxplot(x=df['Rating'], ax=axs[1])
    axs[1].set_title("Boxplot del Rating")
    st.pyplot(fig)

# An√°lisis 4
elif analisis == "Total por Tipo de Cliente":
    st.subheader("üë• Total por Tipo de Cliente")
    st.markdown("Compara el comportamiento de compra entre clientes regulares y miembros.")
    fig, ax = plt.subplots()
    sns.boxplot(data=df, x='Customer type', y='Total', palette='pastel', ax=ax)
    ax.set_title("Total por Tipo de Cliente")
    st.pyplot(fig)

# An√°lisis 5
elif analisis == "M√©todo de Pago":
    st.subheader("üí≥ M√©todo de Pago m√°s Utilizado")
    st.markdown("Distribuci√≥n de los m√©todos de pago m√°s comunes entre los clientes.")
    pagos = df['Payment'].value_counts().reset_index()
    pagos.columns = ['M√©todo de Pago', 'Cantidad']
    fig, ax = plt.subplots()
    sns.barplot(data=pagos, x='Cantidad', y='M√©todo de Pago', palette='Set2', ax=ax)
    ax.set_title("M√©todo de Pago")
    st.pyplot(fig)

# An√°lisis 6
elif analisis == "Costo vs Ganancia Bruta":
    st.subheader("üí∞ Relaci√≥n entre Costo y Ganancia Bruta")
    st.markdown("Visualiza la relaci√≥n entre el costo de los bienes vendidos y el ingreso bruto generado.")
    fig, ax = plt.subplots()
    sns.scatterplot(data=df, x='cogs', y='gross income', hue='Branch', alpha=0.7, ax=ax)
    ax.set_title("Costo vs Ganancia Bruta")
    st.pyplot(fig)

# An√°lisis 7
elif analisis == "Correlaci√≥n Num√©rica":
    st.subheader("üî¢ Correlaci√≥n entre Variables Num√©ricas")
    st.markdown("Mapa de calor que muestra c√≥mo se relacionan num√©ricamente las variables clave.")
    columnas = ['Unit price', 'Quantity', 'Tax 5%', 'Total', 'cogs', 'gross income', 'Rating']
    corr = df[columnas].corr()
    fig, ax = plt.subplots(figsize=(10, 7))
    sns.heatmap(corr, annot=True, cmap='coolwarm', fmt=".2f", ax=ax)
    ax.set_title("Correlaci√≥n Num√©rica")
    st.pyplot(fig)

# An√°lisis 8
elif analisis == "Ingreso Bruto por Sucursal y L√≠nea":
    st.subheader("üè™ Ingreso Bruto por Sucursal y L√≠nea de Producto")
    st.markdown("Explora qu√© l√≠neas de producto generan m√°s ingreso en cada sucursal.")
    resumen = df.groupby(['Branch', 'Product line'])['gross income'].sum().reset_index()
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.barplot(data=resumen, x='Branch', y='gross income', hue='Product line', ax=ax)
    ax.set_title("Ingreso Bruto por Sucursal y L√≠nea de Producto")
    st.pyplot(fig)
